<template>
  <div class="total-book">
    <el-row>
      <el-col :span="5">
        <div style="font-size: 18px">
          {{ "共上架 " + total + " 本图书" }}
        </div>
      </el-col>
      <el-col :span="3">
        <el-button
          type="primary"
          @click="dialogFormVisible = true"
          class="add-btn"
          >添加图书</el-button
        >
      </el-col>
      <el-col :span="13"></el-col>
    </el-row>
  </div>

  <el-card class="box-card" shadow="never">
    <el-table :data="tableData" height="250" style="width: 100%" :fit="true">
      <el-table-column prop="name" label="书名" />
      <el-table-column prop="ISBN" label="ISBN" />
      <el-table-column prop="author" label="作者" />
      <el-table-column prop="publisher" label="出版社" />
      <el-table-column prop="price" label="价格" />
      <el-table-column prop="used" label="成色" />
    </el-table>
  </el-card>

  <el-dialog v-model="dialogFormVisible" title="添加图书" @close="handleClose">
    <el-form ref="formRef" :model="ruleForm" :rules="rules" label-width="70px">
      <el-form-item label="书名" prop="bookname">
        <el-input v-model="ruleForm.bookname" class="add-form"></el-input>
      </el-form-item>
      <el-form-item label="图片" prop="photopath">
        <el-upload
          ref="upload"
          class="upload-demo"
          drag
          :limit="3"
          :on-change="handleChange"
          :on-remove="handleRemove"
          accept="image/png,image/jpg,image/jpeg"
          action=""
          :auto-upload="false"
        >
          <el-icon class="el-icon--upload">
            <upload-filled />
          </el-icon>
          <div class="el-upload__text">
            拖拽图片至此处 或 <em>点击上传图片</em>
          </div>
          <template #tip>
            <div class="el-upload__tip">
              至多3张大小不超过3MB的png/jpg/jpeg文件
            </div>
          </template>
        </el-upload>
      </el-form-item>
      <el-form-item label="作者" prop="author">
        <el-input v-model="ruleForm.author" class="add-form"></el-input>
      </el-form-item>
      <el-form-item label="ISBN号" prop="ISBN">
        <el-input v-model.number="ruleForm.ISBN" class="add-form"></el-input>
      </el-form-item>
      <el-form-item label="出版社" prop="publisher">
        <el-input v-model="ruleForm.publisher" class="add-form"></el-input>
      </el-form-item>
      <el-form-item label="出版年份" prop="date">
        <el-input v-model.number="ruleForm.date" class="add-form"></el-input>
      </el-form-item>
      <el-form-item label="品相" prop="used">
        <el-select
          v-model="ruleForm.used"
          placeholder="选择书籍品相"
          class="add-form"
        >
          <el-option label="全新" value="全新" />
          <el-option label="较新" value="较新" />
          <el-option label="普通" value="普通" />
          <el-option label="可以接受" value="可以接受" />
        </el-select>
      </el-form-item>
      <el-form-item label="价格" prop="price">
        <el-input-number v-model="ruleForm.price" :precision="2" :step="1.0" />
      </el-form-item>
      <el-form-item label="书籍简介" prop="introduction">
        <el-input
          v-model="ruleForm.introduction"
          maxlength="100"
          placeholder="请输入书籍简介"
          show-word-limit
          type="textarea"
          class="add-form"
        ></el-input>
      </el-form-item>
    </el-form>
    <template #footer>
      <span class="dialog-footer">
        <el-button @click="dialogFormVisible = false">取消</el-button>
        <el-button type="primary" @click="addBook">添加</el-button>
      </span>
    </template>
  </el-dialog>
</template>

<script>
import { UploadFilled } from "@element-plus/icons-vue";
import { useCookies } from "vue3-cookies";
import { inject, reactive } from "@vue/runtime-core";
import { ref } from "vue";
import { FOR_TYPES } from "@babel/types";

export default {
  name: "MyBook",
  components: {
    UploadFilled,
  },
  setup() {
    const { cookies } = useCookies();
    const axios = inject("axios");
    let token = cookies.get("token");
    let jwt = require("jsonwebtoken");
    let userid = jwt.decode(token).aud[0];
    let url = "http://localhost:8081/mybook";
    let tableData = reactive([]);
    let total = ref(0);

    axios
      .get(url, {
        params: {
          userid: userid,
        },
      })
      .then((response) => {
        total.value = response.data.length;
        for (let i = 0; i < response.data.length; i++) {
          var temp = {
            id: "",
            name: "",
            ISBN: "",
            author: "",
            publisher: "",
            price: "",
            used: "",
          };
          temp.id = response.data[i].id;
          temp.name = response.data[i].bookname;
          temp.ISBN = response.data[i].iSBN;
          if (!response.data[i].hasOwnProperty("author")) {
            temp.author = "未知作者";
          } else {
            temp.author = response.data[i].author;
          }
          if (!response.data.hasOwnProperty("publisher")) {
            temp.publisher = "未知出版社";
          } else {
            temp.publisher = response.data[i].publisher;
          }
          temp.price = String(response.data[i].price);
          if (response.data[i].used == "0") {
            temp.used = "全新";
          } else if (response.data[i].used == "1") {
            temp.used = "较新";
          } else if (response.data[i].used == "2") {
            temp.used = "普通";
          } else if (response.data[i].used == "3") {
            temp.used = "可以接受";
          }
          tableData.push(temp);
        }
      })
      .catch(function (error) {
        console.log(error);
      });
    return {
      tableData,
      total,
    };
  },
  data() {
    var checkPrice = (rule, value, callback) => {
      if (value != 0) {
        return callback();
      }
      callback(new Error("请输入价格"));
    };

    var checkISBN = (rule, value, callback) => {
      const regISBN = /^\d{13}$/;
      if (regISBN.test(value)) {
        return callback();
      }
      callback(new Error("请输入13位ISBN号"));
    };

    var checkDate = (rule, value, callback) => {
      const regDate = /^\d{4}$/;
      if (value == "") return callback();
      if (regDate.test(value)) {
        return callback();
      }
      callback(new Error("请输入正确的年份"));
    };

    var checkPhone = (rule, value, callback) => {
      const regPhone = /^1\d{10}$/;
      if (value == "") return callback();
      if (regPhone.test(value)) {
        return callback();
      }
      callback(new Error("请输入正确的年份"));
    };

    return {
      mybooks: [],
      dialogFormVisible: false,
      ruleForm: {
        userid: "",
        bookname: "",
        author: "",
        ISBN: "",
        publisher: "",
        date: "",
        used: "",
        price: "",
        introduction: "",
        photopath: [],
        phone: "",
      },
      rules: {
        bookname: [
          {
            required: true,
            message: "请输入书名",
            trigger: "blur",
          },
          {
            min: 1,
            max: 50,
            message: "不超过50个字符",
            trigger: "blur",
          },
        ],
        author: [
          {
            required: false,
            message: "请输入作者",
            trigger: "blur",
          },
          {
            min: 1,
            max: 50,
            message: "不超过50个字符",
            trigger: "blur",
          },
        ],
        ISBN: [
          {
            required: true,
            message: "请输入ISBN号",
            trigger: "blur",
          },
          {
            type: "number",
            validator: checkISBN,
            message: "请输入13位ISBN号",
            trigger: "blur",
          },
        ],
        publisher: [
          {
            required: false,
            message: "请输入出版社",
            trigger: "blur",
          },
          {
            min: 1,
            max: 50,
            message: "不超过50个字符",
            trigger: "blur",
          },
        ],
        date: [
          {
            required: false,
            message: "请输入出版年份",
            trigger: "blur",
          },
          {
            type: "number",
            validator: checkDate,
            message: "请输入正确的年份",
            trigger: "blur",
          },
        ],
        used: [
          {
            required: true,
            message: "请选择书籍品相",
            trigger: "blur",
          },
        ],
        price: [
          {
            required: true,
            message: "请输入价格",
            trigger: "blur",
          },
          {
            validator: checkPrice,
            trigger: "blur",
          },
        ],
        introduction: [
          {
            required: true,
            message: "请输入书籍内容简介",
            trigger: "blur",
          },
        ],
        photopath: [
          {
            required: true,
            message: "请上传书籍图片",
            trigger: "blur",
          },
        ],
        phone: [
          {
            required: true,
            message: "请输入您的联系方式",
            trigger: "blur",
          },
          {
            type: "number",
            validator: checkPhone,
            message: "请输入正确的手机号",
            trigger: "blur",
          },
        ],
      },
    };
  },
  created() {
    this.getBook();
  },
  methods: {
    async getBook() {},

    handleChange(file, fileList) {
      if (file.size / 1024 / 1024 > 3) {
        this.$refs.upload.clearFiles();
        this.$message({
          message: "上传图片大小不能超过3MB",
          type: "error",
        });
      } else {
        let num = fileList.length;
        if (num > 3) {
          this.$refs.upload.clearFiles();
          this.$message({
            message: "最多上传3张图片",
            type: "error",
          });
        } else {
          this.ruleForm.photopath.push(file.raw); //将上传文件付给表单的字段
        }
      }
    },

    handleRemove(file, fileList) {
      console.log("handleRemove", file);
    },

    handleClose() {
      this.$refs.upload.clearFiles();
      this.$refs.formRef.resetFields();
    },

    addBook() {
      const { cookies } = useCookies();
      let token = cookies.get("token");
      let jwt = require("jsonwebtoken");
      this.ruleForm.userid = jwt.decode(token).aud[0];
      let url1 = "http://localhost:8081/addbook";
      let url2 = "http://localhost:8081/addphoto";
      let bookid = "";

      this.$refs.formRef.validate(async (valid) => {
        if (!valid) {
          return;
        } else {
          console.log(this.ruleForm);
          await this.axios
            .post(url1, this.ruleForm)
            .then((response) => {
               bookid = String(response.data);
            })
            .catch(function (error) {
              console.log(error);
            });

          console.log(bookid);
          var forms = new FormData();
          var configs = {
            headers: { "Content-Type": "multipart/form-data" },
          };
          forms.append("bookid", bookid);
          for (let i = 0; i < this.ruleForm.photopath.length; ++i) {
            forms.append("file", this.ruleForm.photopath[i]);
            console.log(this.ruleForm.photopath[i]);
          }
          await this.axios
            .post(url2, forms, configs)
            .then((response) => {
              console.log(response.data)
              if (response.data) {
                this.$message.success("添加书籍成功");
              } else {
                this.$message.error("添加书籍失败");
              }
            })
            .catch(function (error) {
              console.log(error);
            });
          this.addDialogVisible = false;
          this.getBook();
          this.dialogFormVisible = false;
        }
      });
    },
  },
};
</script>

<style scoped>
.total-book {
  height: 5vh;
}
</style>